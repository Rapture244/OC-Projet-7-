# Standard Library Imports
import gc

# Third-Party Library Imports
import faiss  # Required for FAISS-based KNN imputation
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from loguru import logger
from lightgbm import LGBMClassifier, early_stopping, log_evaluation
from scipy.stats import yeojohnson
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import KFold, StratifiedKFold
from sklearn.preprocessing import RobustScaler

# Typing Imports
from typing import List, Tuple, Union, Optional



# ==================================================================================================================== #
#                                                  DATA TRANSFORMATION                                                 #
# ==================================================================================================================== #
def one_hot_encoder(dataframe: pd.DataFrame, nan_as_category: bool = True) -> Tuple[pd.DataFrame, List[str]]:
    """
    One-hot encodes categorical columns in a DataFrame, including NaN values as a separate category if specified.

    Args:
        dataframe (pd.DataFrame): The input DataFrame containing categorical and non-categorical columns.
        nan_as_category (bool, optional): Whether to treat NaN values in categorical columns as a separate category.
                                          Defaults to True.

    Returns:
        Tuple[pd.DataFrame, List[str]]:
            - The transformed DataFrame with one-hot encoded columns.
            - A list of new columns generated by the one-hot encoding.

    Raises:
        ValueError: If the input DataFrame is empty or has no categorical columns.
    """
    if dataframe.empty:
        logger.error("The input DataFrame is empty.")
        raise ValueError("The input DataFrame must not be empty.")

    # Identify categorical columns
    categorical_columns = dataframe.select_dtypes(include=['object']).columns.tolist()
    if not categorical_columns:
        logger.warning("No categorical columns found in the DataFrame. Returning the original DataFrame.")
        return dataframe, []

    logger.debug(f"Identified {len(categorical_columns)} categorical columns for encoding.")

    # Perform one-hot encoding
    try:
        df_encoded = pd.get_dummies(dataframe, columns=categorical_columns, dummy_na=nan_as_category)
    except Exception as e:
        logger.exception("Failed during one-hot encoding.")
        raise ValueError(f"An error occurred during one-hot encoding: {e}")

    # Identify new columns generated by the encoding
    new_columns = [col for col in df_encoded.columns if col not in dataframe.columns]
    logger.success(f"Generated {len(new_columns)} new columns from one-hot encoding.")

    return df_encoded, new_columns


# ==================================================================================================================== #
#                                                MODELING AND EVALUATION                                               #
# ==================================================================================================================== #
def kfold_lightgbm(df: pd.DataFrame, num_folds: int, stratified: bool = False) -> pd.DataFrame:
    """
    Runs a LightGBM model with K-Fold or Stratified K-Fold cross-validation using GPU acceleration.

    Args:
        df (pd.DataFrame): The input dataframe containing training and test data.
        num_folds (int): Number of folds for cross-validation.
        stratified (bool, optional): Whether to use stratified K-Fold. Defaults to False.

    Returns:
        pd.DataFrame: Dataframe containing feature importances across all folds.
    """
    import gc
    import numpy as np
    import pandas as pd
    from lightgbm import LGBMClassifier, early_stopping, log_evaluation
    from sklearn.model_selection import KFold, StratifiedKFold
    from sklearn.metrics import roc_auc_score

    # Split data into training and test sets based on the 'TARGET' column
    train_df = df[df['TARGET'].notnull()]
    test_df = df[df['TARGET'].isnull()].copy()
    logger.info(f"Starting LightGBM with KFold. Train shape: {train_df.shape}, Test shape: {test_df.shape}")
    del df
    gc.collect()  # Perform garbage collection

    # Initialize KFold or StratifiedKFold based on the 'stratified' parameter
    folds = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=42) if stratified else KFold(n_splits=num_folds, shuffle=True, random_state=42)
    logger.info(f"Using {'StratifiedKFold' if stratified else 'KFold'} with {num_folds} folds.")

    # Initialize arrays for out-of-fold predictions and test predictions
    oof_preds = np.zeros(train_df.shape[0])
    sub_preds = np.zeros(test_df.shape[0])
    feature_importance_df = pd.DataFrame()

    # Identify features to use for training
    feats = [f for f in train_df.columns if f not in ['TARGET', 'SK_ID_CURR', 'SK_ID_BUREAU', 'SK_ID_PREV', 'index']]

    # Iterate through each fold
    for n_fold, (train_idx, valid_idx) in enumerate(folds.split(train_df[feats], train_df['TARGET'])):
        logger.info(f"Starting fold {n_fold + 1}...")

        # Split the data into training and validation sets for the current fold
        train_x, train_y = train_df[feats].iloc[train_idx], train_df['TARGET'].iloc[train_idx]
        valid_x, valid_y = train_df[feats].iloc[valid_idx], train_df['TARGET'].iloc[valid_idx]

        # Initialize the LightGBM classifier with specified hyperparameters
        clf = LGBMClassifier(
            nthread=4,
            n_estimators=10000,
            learning_rate=0.02,
            num_leaves=34,
            colsample_bytree=0.9497036,
            subsample=0.8715623,
            max_depth=8,
            reg_alpha=0.041545473,
            reg_lambda=0.0735294,
            min_split_gain=0.0222415,
            min_child_weight=39.3259775,
            verbose=-1,
            random_state=42,
            device='gpu',  # Enable GPU
            gpu_platform_id=0,  # Specify GPU platform ID
            gpu_device_id=0  # Specify GPU device ID
            )

        # Train the model with early stopping and evaluation metrics
        clf.fit(
            train_x, train_y,
            eval_set=[(train_x, train_y), (valid_x, valid_y)],
            eval_metric='auc',
            callbacks=[early_stopping(200), log_evaluation(200)]
            )

        # Make predictions for validation and test sets
        oof_preds[valid_idx] = clf.predict_proba(valid_x, num_iteration=clf.best_iteration_)[:, 1]
        sub_preds += clf.predict_proba(test_df[feats], num_iteration=clf.best_iteration_)[:, 1] / folds.n_splits

        # Store feature importance for the current fold
        fold_importance_df = pd.DataFrame()
        fold_importance_df["feature"] = feats
        fold_importance_df["importance"] = clf.feature_importances_
        fold_importance_df["fold"] = n_fold + 1
        feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)

        # Calculate and log AUC score for the current fold
        auc_score = roc_auc_score(valid_y, oof_preds[valid_idx])
        logger.info(f'Fold {n_fold + 1} AUC : {auc_score:.6f}')

        # Clean up memory for the current fold
        del clf, train_x, train_y, valid_x, valid_y
        gc.collect()

    # Calculate and log the overall AUC score
    full_auc = roc_auc_score(train_df["TARGET"], oof_preds)
    logger.info(f'Full AUC score: {full_auc:.6f}')

    # Display feature importance across all folds
    display_importances(feature_importance_df)

    return feature_importance_df

def display_importances(feature_importance_df_: pd.DataFrame, top_n: int = 40) -> None:
    """
    Displays and saves a plot of feature importances.

    Args:
        feature_importance_df_ (pd.DataFrame): Dataframe containing feature importances.
        top_n (int, optional): Number of top features to display. Defaults to 40.
    """
    # Log the start of the visualization process
    logger.info(f"Displaying top {top_n} feature importances...")

    # Compute the average importance of each feature and select the top_n features
    cols = (
        feature_importance_df_[["feature", "importance"]]
        .groupby("feature")
        .mean()
        .sort_values(by="importance", ascending=False)
        .head(top_n)
        .index
    )

    # Filter the dataframe to include only the top features
    best_features = feature_importance_df_.loc[feature_importance_df_["feature"].isin(cols)]

    # Create the plot
    plt.figure(figsize=(8, 10))  # Set figure size
    sns.barplot(
        x="importance",
        y="feature",
        data=best_features.sort_values(by="importance", ascending=False),
        palette="viridis"
        )
    plt.title('LightGBM Features (avg over folds)', fontsize=14, weight='bold')  # Add a descriptive title
    plt.xlabel('Importance', fontsize=12)  # Label x-axis
    plt.ylabel('Feature', fontsize=12)  # Label y-axis
    plt.tight_layout()  # Adjust layout to avoid overlapping

    # Display the plot
    plt.show()

# ==================================================================================================================== #
#                                                  FILLING NAN VALUES                                                  #
# ==================================================================================================================== #
@logger.catch
def faiss_knn_imputation(
        df: pd.DataFrame,
        target_column: str = "TARGET",
        bool_column: str = "CODE_GENDER_0",
        threshold: float = 25.0,
        valid_row_threshold: float = 0.5,
        batch_size: int = 40000
        ) -> pd.DataFrame:
    """
    FAISS-based Hybrid KNN Imputation:
        - Non-Iterative for columns â‰¤ threshold missing values.
        - Iterative for columns > threshold missing values.
        - Valid rows: rows with > valid_row_threshold non-NaN values.
        - Remaining NaNs after FAISS are filled with the column median.

    Args:
        df (pd.DataFrame): Input DataFrame with missing values.
        target_column (str): Target column to exclude from imputation.
        bool_column (str): Boolean column to exclude from scaling.
        threshold (float): Missing value threshold for non-iterative vs. iterative imputation.
        valid_row_threshold (float): Minimum fraction of valid values required per row.
        batch_size (int): Batch size for FAISS nearest neighbor search.

    Returns:
        pd.DataFrame: DataFrame with imputed values.
    """
    logger.info(f"Starting FAISS KNN imputation for dataframe with shape: {df.shape}")

    # Copy DataFrame to avoid modifying the original
    df = df.copy()

    # Replace infinite values with NaN
    df.replace([np.inf, -np.inf], np.nan, inplace=True)

    # Store original data types
    original_dtypes = df.dtypes

    # Identify features to impute
    complete_cols = df.columns[df.isna().sum() == 0].tolist()
    features = [col for col in df.columns if col not in complete_cols + [target_column]]
    missing_percentage = df[features].isna().mean()

    non_iterative_cols = missing_percentage[missing_percentage <= threshold / 100].index.tolist()
    iterative_cols = missing_percentage[missing_percentage > threshold / 100].index.tolist()

    logger.info(f"Non-Iterative Columns: {non_iterative_cols}")
    logger.info(f"Iterative Columns: {iterative_cols}")

    # Scale numeric features, excluding boolean columns
    scaler = RobustScaler()
    scale_cols = [col for col in features if col != bool_column]
    df_scaled = df.copy()
    df_scaled[scale_cols] = scaler.fit_transform(df[scale_cols])

    # Define FAISS Imputation Function
    def faiss_impute(column: str, iterative: bool = False):
        """Impute missing values for a single column using FAISS."""
        other_cols = [c for c in scale_cols if c != column]

        # Filter valid rows
        valid_rows = df_scaled[other_cols].notna().sum(axis=1) >= len(other_cols) * valid_row_threshold
        valid_rows &= df_scaled[column].notna()
        valid_data = df_scaled.loc[valid_rows, other_cols].to_numpy().astype(np.float32)

        if valid_data.size == 0:
            logger.warning(f"No valid rows found for column: {column}")
            return

        # Normalize data and build FAISS index
        norms = np.linalg.norm(valid_data, axis=1, keepdims=True)
        normalized_data = valid_data / np.maximum(norms, 1e-8)
        index = faiss.IndexFlatIP(normalized_data.shape[1])
        index.add(normalized_data)

        # Identify rows to impute
        rows_to_impute = df_scaled.loc[
            (df_scaled[other_cols].notna().sum(axis=1) >= len(other_cols) * valid_row_threshold)
            & (df_scaled[column].isna()),
            other_cols
        ].to_numpy().astype(np.float32)

        if rows_to_impute.size == 0:
            logger.warning(f"No rows to impute for column: {column}")
            return

        # Normalize rows to impute
        norms = np.linalg.norm(rows_to_impute, axis=1, keepdims=True)
        normalized_rows = rows_to_impute / np.maximum(norms, 1e-8)

        # Perform batched FAISS nearest-neighbor search
        imputed_values = []
        for start in range(0, len(normalized_rows), batch_size):
            batch = normalized_rows[start:start + batch_size]
            _, neighbors = index.search(batch, 50)  # Find 50 nearest neighbors
            for neighbor_idx in neighbors:
                neighbor_values = valid_data[neighbor_idx][:, 0]
                valid_neighbors = neighbor_values[~np.isnan(neighbor_values)]
                imputed_values.append(np.median(valid_neighbors) if valid_neighbors.size > 0 else np.nan)

        # Update the DataFrame with imputed values
        df_scaled.loc[rows_to_impute.index, column] = imputed_values

    # Impute non-iterative columns
    for col in non_iterative_cols:
        logger.info(f"Imputing non-iterative column: {col}")
        faiss_impute(col)

    # Impute iterative columns
    for col in iterative_cols:
        logger.info(f"Imputing iterative column: {col}")
        faiss_impute(col, iterative=True)

    # Reverse scaling
    df[scale_cols] = scaler.inverse_transform(df_scaled[scale_cols])

    # Fill remaining NaNs with column medians
    for col in features:
        if df[col].isna().any():
            median = df[col].median()
            df[col].fillna(median, inplace=True)
            logger.warning(f"Filled remaining NaNs in column '{col}' with median value: {median}")

    # Restore original data types
    for col in features:
        df[col] = df[col].astype(original_dtypes[col])

    logger.success("FAISS KNN imputation completed successfully.")
    return df[[target_column] + [col for col in df.columns if col != target_column]]



