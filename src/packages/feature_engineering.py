import pandas as pd
import numpy as np
from typing import List, Tuple, Union, Optional
from loguru import logger
from lightgbm import LGBMClassifier
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import KFold, StratifiedKFold
from lightgbm import early_stopping, log_evaluation
import matplotlib.pyplot as plt
import seaborn as sns
import gc
from scipy.stats import yeojohnson


# ==================================================================================================================== #
#                                                  DATA TRANSFORMATION                                                 #
# ==================================================================================================================== #
def one_hot_encoder(dataframe: pd.DataFrame, nan_as_category: bool = True) -> Tuple[pd.DataFrame, List[str]]:
    """
    One-hot encodes categorical columns in a DataFrame, including NaN values as a separate category if specified.

    Args:
        dataframe (pd.DataFrame): The input DataFrame containing categorical and non-categorical columns.
        nan_as_category (bool, optional): Whether to treat NaN values in categorical columns as a separate category.
                                          Defaults to True.

    Returns:
        Tuple[pd.DataFrame, List[str]]:
            - The transformed DataFrame with one-hot encoded columns.
            - A list of new columns generated by the one-hot encoding.

    Raises:
        ValueError: If the input DataFrame is empty or has no categorical columns.
    """
    if dataframe.empty:
        logger.error("The input DataFrame is empty.")
        raise ValueError("The input DataFrame must not be empty.")

    # Identify categorical columns
    categorical_columns = dataframe.select_dtypes(include=['object']).columns.tolist()
    if not categorical_columns:
        logger.warning("No categorical columns found in the DataFrame. Returning the original DataFrame.")
        return dataframe, []

    logger.info(f"Identified {len(categorical_columns)} categorical columns for encoding.")

    # Perform one-hot encoding
    try:
        df_encoded = pd.get_dummies(dataframe, columns=categorical_columns, dummy_na=nan_as_category)
    except Exception as e:
        logger.exception("Failed during one-hot encoding.")
        raise ValueError(f"An error occurred during one-hot encoding: {e}")

    # Identify new columns generated by the encoding
    new_columns = [col for col in df_encoded.columns if col not in dataframe.columns]
    logger.info(f"Generated {len(new_columns)} new columns from one-hot encoding.")

    return df_encoded, new_columns

